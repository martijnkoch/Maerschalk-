#include <ESP8266WiFi.h>
#include <WiFiClientSecure.h>
#include <ArduinoJson.h>

#ifndef STASSID
#define STASSID "SSID"
#define STAPSK  "WW"
#endif

int ledPin = 13;
int buttonPin = 16;
int temp = 0;

const char* ssid = STASSID;
const char* password = STAPSK;

const char* host = "herrkoch.nl";
const int httpsPort = 443;

// Use web browser to view and copy
// SHA1 fingerprint of the certificate
const char* fingerprint = "97:DF:14:A4:29:F6:8E:8C:6C:16:83:6C:A3:7D:52:2B:E0:E2:71:43";

WiFiClientSecure client;

void setup() {
  pinMode(ledPin,OUTPUT);
  digitalWrite(ledPin,LOW);
  pinMode(buttonPin, INPUT);
  
  
  Serial.begin(115200);
  Serial.println();
  Serial.print("connecting to ");
  Serial.println(ssid);
  WiFi.mode(WIFI_STA);
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("");
  Serial.println("WiFi connected");
  digitalWrite( ledPin , HIGH);
  Serial.println("IP address: ");
  Serial.println(WiFi.localIP());

}

void loop() {
  
  while (digitalRead(buttonPin) == HIGH) {
    sendJson();
  }

}

void sendJson(){
  // Use WiFiClientSecure class to create TLS connection
  WiFiClientSecure client;
  Serial.print("connecting to ");
  Serial.println(host);

  Serial.printf("Using fingerprint '%s'\n", fingerprint);
  client.setFingerprint(fingerprint);

  if (!client.connect(host, httpsPort)) {
    Serial.println("connection failed");
    return;
  }
  Serial.println("connected to host");

  if (client.verify(fingerprint, host)) {
    Serial.println("certificate matches");
  } else {
    Serial.println("certificate doesn't match");
  }

  String url = "/api/emergency_call/add";
  Serial.print("requesting URL: ");
  Serial.println(url);

    String PostData = "{";
    PostData += "\"company_name\": \"DEZEISMETEENKNOPVERSTUURLEUKHESCHATJES\",";
    PostData += "\"phone\": \"0492beterdan040he\"}";

    client.print(String("POST ") + url + " HTTP/1.1\r\n" +
                 "Host: " + host + "\r\n" +
                 "Content-Type: application/json; charset=utf-8\r\n" +
                 "Content-Length: " + PostData.length() + "\r\n" +
                 "\r\n" + // This is the extra CR+LF pair to signify the start of a body
                 PostData + "\n");
    Serial.println("json injected:" + PostData);  
    delay(100);         
}
